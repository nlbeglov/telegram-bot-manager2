package com.telegramproposalbot.service;

import com.telegramproposalbot.dto.BotSettingsDTO;
import com.telegramproposalbot.entity.Bot;
import com.telegramproposalbot.entity.BotSettings;
import com.telegramproposalbot.entity.User;
import com.telegramproposalbot.exception.BotCreationException;
import com.telegramproposalbot.exception.BotNotFoundException;
import com.telegramproposalbot.exception.UnauthorizedException;
import com.telegramproposalbot.repository.BotRepository;
import com.telegramproposalbot.repository.BotSettingsRepository;
import com.telegramproposalbot.telegram.bot.ProposalBot;
import jakarta.activation.DataHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import org.springframework.context.ApplicationContext;


@Service
public class BotService {

    private final BotRepository botRepository;
    private final BotSettingsRepository botSettingsRepository;
    private final BotAdminService botAdminService;
    private final TelegramBotsApi telegramBotsApi;
    private final SubscriptionService subscriptionService;
    private final ChannelService channelService;
    private final BlockedUserService blockedUserService;

    @Autowired
    private ApplicationContext applicationContext;


    // –ö—ç—à –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    private final Map<Long, ProposalBot> runningBots = new ConcurrentHashMap<>();

    // –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    private final Map<String, String> adminStates = new ConcurrentHashMap<>();

    @Autowired
    public BotService(BotRepository botRepository,
                      BotSettingsRepository botSettingsRepository,
                      BotAdminService botAdminService,
                      TelegramBotsApi telegramBotsApi,
                      SubscriptionService subscriptionService,
                      ChannelService channelService,
                      BlockedUserService blockedUserService,
                      ApplicationContext applicationContext) {
        this.botRepository = botRepository;
        this.botSettingsRepository = botSettingsRepository;
        this.botAdminService = botAdminService;
        this.telegramBotsApi = telegramBotsApi;
        this.subscriptionService = subscriptionService;
        this.channelService = channelService;
        this.blockedUserService = blockedUserService;
        this.applicationContext = applicationContext;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –≤ Telegram
     */
    @Transactional
    public Bot createBot(User owner, String token, String name, String welcomeMessage) throws BotCreationException {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
        if (!subscriptionService.canCreateBot(owner)) {
            throw new BotCreationException("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if (botRepository.existsByToken(token)) {
            throw new BotCreationException("–ë–æ—Ç —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ—Ç–µ –≤ –ë–î
            Bot bot = new Bot();
            bot.setToken(token);
            bot.setName(name);
            bot.setOwnerId(owner.getId());
            bot.setWelcomeMessage(welcomeMessage);
            bot.setConfirmationMessage("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.");
            bot.setActive(true);
            bot.setCreatedAt(new Date());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
            Bot savedBot = botRepository.save(bot);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            botAdminService.addAdmin(savedBot.getId(), owner.getTelegramId(), owner.getUsername(), true);

            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            createDefaultSettings(savedBot.getId());

            // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            startBot(savedBot);

            return savedBot;
        } catch (Exception e) {
            throw new BotCreationException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: " + e.getMessage(), e);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ Telegram
     */
    public void startBot(Bot bot) throws TelegramApiException {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –±–æ—Ç
        if (runningBots.containsKey(bot.getId())) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ —á–µ—Ä–µ–∑ Spring
        ProposalBot proposalBot = applicationContext.getBean(ProposalBot.class);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        proposalBot.initialize(bot.getToken(), bot);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ Telegram API
        telegramBotsApi.registerBot(proposalBot);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
        runningBots.put(bot.getId(), proposalBot);
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
     */
    public void stopBot(Long botId) {
        ProposalBot bot = runningBots.remove(botId);
        if (bot != null) {
            // TelegramBotsApi –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ unregisterBot,
            // –Ω–æ –º—ã –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        }
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    @Transactional
    public void restartBot(Long botId) throws BotNotFoundException, TelegramApiException {
        Bot bot = botRepository.findById(botId)
                .orElseThrow(() -> new BotNotFoundException("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        stopBot(botId);
        startBot(bot);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞
     */
    private void createDefaultSettings(Long botId) {
        List<BotSettings> defaultSettings = new ArrayList<>();

        // –ü–æ–¥–ø–∏—Å—å –≤ –ø—É–±–ª–∏–∫—É–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        defaultSettings.add(new BotSettings(botId, "publication_footer",
                "ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∏ @ProposalManagerBot"));

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        defaultSettings.add(new BotSettings(botId, "show_statistics", "true"));

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫—É–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        defaultSettings.add(new BotSettings(botId, "auto_format", "true"));

        botSettingsRepository.saveAll(defaultSettings);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –ø–æ –∫–ª—é—á—É
     */
    public String getBotSetting(Long botId, String key, String defaultValue) {
        return botSettingsRepository.findByBotIdAndKey(botId, key)
                .map(BotSettings::getValue)
                .orElse(defaultValue);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
     */
    public boolean canCreateBot(User user) {
        return subscriptionService.canCreateBot(user);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–ª–∞–¥–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –±–æ—Ç–æ–º
     */
    public boolean userHasBots(User user) {
        return botRepository.countByOwnerId(user.getId()) > 0;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public Long getLatestBotId(User user) {
        return botRepository.findTopByOwnerIdOrderByCreatedAtDesc(user.getId())
                .map(Bot::getId)
                .orElse(null);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
     */
    public boolean isAdmin(Long botId, Long telegramId) {
        return botAdminService.isAdmin(botId, telegramId);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
     */
    public List<Long> getAdminIds(Long botId) {
        return botAdminService.getAdminIds(botId);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è FSM)
     */
    public void setAdminState(Long botId, Long adminId, String state) {
        adminStates.put(botId + ":" + adminId, state);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    public String getAdminState(Long botId, Long adminId) {
        return adminStates.getOrDefault(botId + ":" + adminId, "NONE");
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    public void clearAdminState(Long botId, Long adminId) {
        adminStates.remove(botId + ":" + adminId);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<Bot> getUserBots(Long userId) {
        return botRepository.findByOwnerId(userId);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
     */
    public Map<String, Integer> getBotStats(Long botId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        Map<String, Integer> stats = new HashMap<>();
        stats.put("messages_received", 150); // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        stats.put("messages_published", 85);
        stats.put("messages_rejected", 65);
        stats.put("users_blocked", 5);
        return stats;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
     */
    public Map<String, String> getBotSettingsMap(Long botId) {
        List<BotSettings> settings = botSettingsRepository.findByBotId(botId);
        Map<String, String> settingsMap = new HashMap<>();

        for (BotSettings setting : settings) {
            settingsMap.put(setting.getKey(), setting.getValue());
        }

        return settingsMap;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ Premium —Ñ—É–Ω–∫—Ü–∏—è
     */
    public boolean hasPremiumFeature(Bot bot, String feature) {
        return subscriptionService.hasPremiumFeature(bot.getOwnerId(), feature);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞
     */
    public boolean hasPremiumSubscription(Long ownerId) {
        return subscriptionService.hasPremiumSubscription(ownerId);
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
     */
    public void schedulePublication(Long botId, Long channelId, String text, Date scheduledDate) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Spring Scheduler –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        System.out.println("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ " + botId +
                " –≤ –∫–∞–Ω–∞–ª " + channelId + " –Ω–∞ " + scheduledDate);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
     */
    public boolean isOwnerOrAdmin(Long botId, Long telegramId) {
        Bot bot = botRepository.findById(botId).orElse(null);
        if (bot == null) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if (bot.getOwnerId().equals(telegramId)) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        return botAdminService.isAdmin(botId, telegramId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
     */
    public boolean isOwner(Long botId, Long telegramId) {
        Bot bot = botRepository.findById(botId).orElse(null);
        if (bot == null) {
            return false;
        }

        return bot.getOwnerId().equals(telegramId);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –±–æ—Ç–∞
     */
    @Transactional
    public Bot updateBotName(Long botId, String name) throws BotNotFoundException {
        Bot bot = botRepository.findById(botId)
                .orElseThrow(() -> new BotNotFoundException("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        bot.setName(name);
        bot.setUpdatedAt(new Date());
        return botRepository.save(bot);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
     */
    @Transactional
    public Bot updateBotWelcomeMessage(Long botId, String welcomeMessage) throws BotNotFoundException {
        Bot bot = botRepository.findById(botId)
                .orElseThrow(() -> new BotNotFoundException("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        bot.setWelcomeMessage(welcomeMessage);
        bot.setUpdatedAt(new Date());
        return botRepository.save(bot);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
     */
    @Transactional
    public Bot updateBotConfirmationMessage(Long botId, String confirmationMessage) throws BotNotFoundException {
        Bot bot = botRepository.findById(botId)
                .orElseThrow(() -> new BotNotFoundException("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        bot.setConfirmationMessage(confirmationMessage);
        bot.setUpdatedAt(new Date());
        return botRepository.save(bot);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞
     */
    @Transactional
    public BotSettings saveBotSetting(Long botId, String key, String value) {
        Optional<BotSettings> existingSetting = botSettingsRepository.findByBotIdAndKey(botId, key);

        if (existingSetting.isPresent()) {
            BotSettings setting = existingSetting.get();
            setting.setValue(value);
            setting.setUpdatedAt(new Date());
            return botSettingsRepository.save(setting);
        } else {
            BotSettings newSetting = new BotSettings(botId, key, value);
            return botSettingsRepository.save(newSetting);
        }
    }

    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞
     */
    @Transactional
    public Bot toggleBotActive(Long botId, boolean active) throws BotNotFoundException {
        Bot bot = botRepository.findById(botId)
                .orElseThrow(() -> new BotNotFoundException("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        bot.setActive(active);
        bot.setUpdatedAt(new Date());

        // –ï—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if (active) {
            try {
                startBot(bot);
            } catch (TelegramApiException e) {
                throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", e);
            }
        } else {
            stopBot(botId);
        }

        return botRepository.save(bot);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
     */
    @Transactional
    public void addBotAdmin(Long botId, Long adminId, String username, boolean isMainAdmin) throws BotNotFoundException, UnauthorizedException {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        if (!botRepository.existsById(botId)) {
            throw new BotNotFoundException("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        botAdminService.addAdmin(botId, adminId, username, isMainAdmin);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∫ –±–æ—Ç—É
     */
    @Transactional
    public boolean addChannel(Long botId, String channelUsername) throws BotNotFoundException {
        return channelService.addChannel(botId, channelUsername);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –±–æ—Ç–∞ –ø–æ ID
     */
    public Bot getBotById(Long botId) throws BotNotFoundException {
        return botRepository.findById(botId)
                .orElseThrow(() -> new BotNotFoundException("–ë–æ—Ç —Å ID " + botId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ DTO
     */
    @Transactional
    public Bot updateBotSettings(Long botId, BotSettingsDTO settings) throws BotNotFoundException {
        Bot bot = getBotById(botId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if (settings.getName() != null) {
            bot.setName(settings.getName());
        }

        if (settings.getWelcomeMessage() != null) {
            bot.setWelcomeMessage(settings.getWelcomeMessage());
        }

        if (settings.getConfirmationMessage() != null) {
            bot.setConfirmationMessage(settings.getConfirmationMessage());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (settings.getPublicationFooter() != null) {
            saveBotSetting(botId, "publication_footer", settings.getPublicationFooter());
        }

        if (settings.getAutoFormat() != null) {
            saveBotSetting(botId, "auto_format", settings.getAutoFormat().toString());
        }

        if (settings.getShowStatistics() != null) {
            saveBotSetting(botId, "show_statistics", settings.getShowStatistics().toString());
        }

        bot.setUpdatedAt(new Date());
        return botRepository.save(bot);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –±–æ—Ç–∞
     */
    @Transactional
    public void deleteBot(Long botId) throws BotNotFoundException {
        Bot bot = getBotById(botId);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        stopBot(botId);

        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        botAdminService.deleteAdminsByBotId(botId);
        blockedUserService.clearBlockedUsers(botId);
        channelService.deleteChannelsByBotId(botId);
        botSettingsRepository.deleteByBotId(botId);

        // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        botRepository.delete(bot);
    }
}