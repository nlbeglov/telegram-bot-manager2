package com.telegramproposalbot.telegram.bot;

import com.telegramproposalbot.entity.Bot;
import com.telegramproposalbot.entity.BlockedUser;
import com.telegramproposalbot.service.BlockedUserService;
import com.telegramproposalbot.service.BotService;
import com.telegramproposalbot.service.ChannelService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.ForwardMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.lang.reflect.Field;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class ProposalBot extends TelegramLongPollingBot {

    private Bot botConfig;
    private final BotService botService;
    private final BlockedUserService blockedUserService;
    private final ChannelService channelService;

    // –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, Map<Integer, Message>> userMessages = new ConcurrentHashMap<>();

    // –ö—ç—à –¥–ª—è —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∞–¥–º–∏–Ω–∞–º–∏
    private final Map<Integer, MessageLink> messageLinks = new ConcurrentHashMap<>();

    @Autowired
    public ProposalBot(BotService botService,
                       BlockedUserService blockedUserService,
                       ChannelService channelService) {
        super(new DefaultBotOptions(), "placeholder-token"); // –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.botService = botService;
        this.blockedUserService = blockedUserService;
        this.channelService = channelService;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
     */
    public void initialize(String token, Bot botConfig) {
        this.botConfig = botConfig;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        try {
            Field tokenField = this.getClass().getSuperclass().getDeclaredField("botToken");
            tokenField.setAccessible(true);
            tokenField.set(this, token);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞", e);
        }
    }

    @Override
    public String getBotUsername() {
        return botConfig != null ? botConfig.getName() : "uninitialized-bot";
    }

    // –ú–µ—Ç–æ–¥ getBotToken() —É—Å—Ç–∞—Ä–µ–ª, –Ω–æ –Ω–∞–º –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    @Deprecated
    @Override
    public String getBotToken() {
        try {
            Field tokenField = this.getClass().getSuperclass().getDeclaredField("botToken");
            tokenField.setAccessible(true);
            return (String) tokenField.get(this);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞", e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (botConfig == null) {
            System.err.println("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        try {
            if (update.hasMessage()) {
                handleMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update.getCallbackQuery());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleMessage(Message message) throws TelegramApiException {
        Long chatId = message.getChatId();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        boolean isAdmin = botService.isAdmin(botConfig.getId(), message.getFrom().getId());

        if (isAdmin) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (message.isReply() && message.getReplyToMessage() != null) {
                handleAdminReply(message);
            } else {
                // –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if (message.hasText() && message.getText().startsWith("/")) {
                    handleAdminCommand(message);
                } else {
                    sendAdminHelp(chatId);
                }
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (blockedUserService.isBlocked(botConfig.getId(), message.getFrom().getId())) {
                SendMessage blockedMessage = new SendMessage();
                blockedMessage.setChatId(chatId.toString());
                blockedMessage.setText("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.");
                execute(blockedMessage);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            handleUserMessage(message);
        }
    }

    private void handleUserMessage(Message message) throws TelegramApiException {
        Long userId = message.getFrom().getId();
        Long chatId = message.getChatId();

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (!userMessages.containsKey(userId)) {
            userMessages.put(userId, new HashMap<>());

            SendMessage welcomeMessage = new SendMessage();
            welcomeMessage.setChatId(chatId.toString());
            welcomeMessage.setText(botConfig.getWelcomeMessage());
            execute(welcomeMessage);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à–µ
        userMessages.get(userId).put(message.getMessageId(), message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        SendMessage confirmationMessage = new SendMessage();
        confirmationMessage.setChatId(chatId.toString());
        confirmationMessage.setText(botConfig.getConfirmationMessage() != null
                ? botConfig.getConfirmationMessage()
                : "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.");
        execute(confirmationMessage);

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        forwardMessageToAdmins(message);
    }

    private void forwardMessageToAdmins(Message message) throws TelegramApiException {
        List<Long> adminIds = botService.getAdminIds(botConfig.getId());

        for (Long adminId : adminIds) {
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ForwardMessage forwardMessage = new ForwardMessage();
            forwardMessage.setChatId(adminId.toString());
            forwardMessage.setFromChatId(message.getChatId().toString());
            forwardMessage.setMessageId(message.getMessageId());
            Message forwardedMessage = execute(forwardMessage);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            SendMessage controlMessage = new SendMessage();
            controlMessage.setChatId(adminId.toString());
            controlMessage.setText("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:");

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            InlineKeyboardMarkup markup = createAdminKeyboard(message.getFrom().getId(), message.getMessageId());
            controlMessage.setReplyMarkup(markup);

            Message controlMessageSent = execute(controlMessage);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            messageLinks.put(controlMessageSent.getMessageId(),
                    new MessageLink(message.getFrom().getId(), message.getMessageId(),
                            forwardedMessage.getMessageId(), controlMessageSent.getMessageId()));
        }
    }

    private InlineKeyboardMarkup createAdminKeyboard(Long userId, Integer messageId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥: –û–¥–æ–±—Ä–∏—Ç—å –∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        List<InlineKeyboardButton> row1 = new ArrayList<>();

        InlineKeyboardButton approveButton = new InlineKeyboardButton();
        approveButton.setText("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å");
        approveButton.setCallbackData("approve:" + userId + ":" + messageId);
        row1.add(approveButton);

        InlineKeyboardButton editButton = new InlineKeyboardButton();
        editButton.setText("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        editButton.setCallbackData("edit:" + userId + ":" + messageId);
        row1.add(editButton);

        keyboard.add(row1);

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥: –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        List<InlineKeyboardButton> row2 = new ArrayList<>();

        InlineKeyboardButton rejectButton = new InlineKeyboardButton();
        rejectButton.setText("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
        rejectButton.setCallbackData("reject:" + userId + ":" + messageId);
        row2.add(rejectButton);

        InlineKeyboardButton blockButton = new InlineKeyboardButton();
        blockButton.setText("‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å");
        blockButton.setCallbackData("block:" + userId + ":" + messageId);
        row2.add(blockButton);

        keyboard.add(row2);

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        List<InlineKeyboardButton> row3 = new ArrayList<>();

        InlineKeyboardButton scheduleButton = new InlineKeyboardButton();
        scheduleButton.setText("üïí –û—Ç–ª–æ–∂–∏—Ç—å");
        scheduleButton.setCallbackData("schedule:" + userId + ":" + messageId);
        row3.add(scheduleButton);

        InlineKeyboardButton silentButton = new InlineKeyboardButton();
        silentButton.setText("üîï –ë–µ–∑ –∑–≤—É–∫–∞");
        silentButton.setCallbackData("silent:" + userId + ":" + messageId);
        row3.add(silentButton);

        keyboard.add(row3);

        markup.setKeyboard(keyboard);
        return markup;
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) throws TelegramApiException {
        String[] data = callbackQuery.getData().split(":");
        String action = data[0];
        Long userId = Long.parseLong(data[1]);
        Integer messageId = Integer.parseInt(data[2]);

        switch (action) {
            case "approve":
                handleApprove(callbackQuery, userId, messageId);
                break;
            case "edit":
                handleEdit(callbackQuery, userId, messageId);
                break;
            case "reject":
                handleReject(callbackQuery, userId, messageId);
                break;
            case "block":
                handleBlock(callbackQuery, userId, messageId);
                break;
            case "schedule":
                handleSchedule(callbackQuery, userId, messageId);
                break;
            case "silent":
                handleSilent(callbackQuery, userId, messageId);
                break;
            case "publish":
                // –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
                Long channelId = Long.parseLong(data[3]);
                publishToChannel(callbackQuery, userId, messageId, channelId, false, null);
                break;
            case "publish_silent":
                // –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –∑–≤—É–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
                Long silentChannelId = Long.parseLong(data[3]);
                publishToChannel(callbackQuery, userId, messageId, silentChannelId, true, null);
                break;
            case "schedule_time":
                // –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                Long scheduledChannelId = Long.parseLong(data[3]);
                Date scheduledDate = new Date(Long.parseLong(data[4]));
                publishToChannel(callbackQuery, userId, messageId, scheduledChannelId, false, scheduledDate);
                break;
            case "schedule_cancel":
            case "silent_cancel":
                // –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
                EditMessageText resetMessage = new EditMessageText();
                resetMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
                resetMessage.setMessageId(callbackQuery.getMessage().getMessageId());
                resetMessage.setText("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:");
                resetMessage.setReplyMarkup(createAdminKeyboard(userId, messageId));
                execute(resetMessage);
                break;
            case "undo_reject":
                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI, —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞
                EditMessageText undoMessage = new EditMessageText();
                undoMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
                undoMessage.setMessageId(callbackQuery.getMessage().getMessageId());
                undoMessage.setText("üëÜ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                undoMessage.setReplyMarkup(createAdminKeyboard(userId, messageId));
                execute(undoMessage);
                break;
            case "unblock":
                // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                handleUnblock(callbackQuery, userId);
                break;
            default:
                System.out.println("Unknown callback action: " + action);
        }
    }

    private void handleApprove(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        List<Long> channelIds = channelService.getChannelIds(botConfig.getId());

        if (channelIds.isEmpty()) {
            // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
            editMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            editMessage.setText("‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. " +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.");
            execute(editMessage);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à–µ
        Map<Integer, Message> userMsgs = userMessages.getOrDefault(userId, new HashMap<>());
        Message originalMessage = userMsgs.get(messageId);

        if (originalMessage == null) {
            EditMessageText errorMessage = new EditMessageText();
            errorMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
            errorMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            errorMessage.setText("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ.");
            execute(errorMessage);
            return;
        }

        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        if (channelIds.size() > 1) {
            showChannelSelection(callbackQuery, userId, messageId);
            return;
        }

        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –æ–¥–∏–Ω, –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
        Long channelId = channelIds.get(0);
        publishToChannel(callbackQuery, userId, messageId, channelId, false, null);
    }

    private void showChannelSelection(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        List<Map<String, String>> channels = channelService.getChannelsInfo(botConfig.getId());

        EditMessageText selectionMessage = new EditMessageText();
        selectionMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
        selectionMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        selectionMessage.setText("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Map<String, String> channel : channels) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton channelButton = new InlineKeyboardButton();
            channelButton.setText(channel.get("title"));
            channelButton.setCallbackData("publish:" + userId + ":" + messageId + ":" + channel.get("id"));
            row.add(channelButton);
            keyboard.add(row);
        }

        markup.setKeyboard(keyboard);
        selectionMessage.setReplyMarkup(markup);

        execute(selectionMessage);
    }

    private void publishToChannel(CallbackQuery callbackQuery, Long userId, Integer messageId,
                                  Long channelId, boolean silent, Date scheduledDate) throws TelegramApiException {
        Map<Integer, Message> userMsgs = userMessages.getOrDefault(userId, new HashMap<>());
        Message originalMessage = userMsgs.get(messageId);

        if (originalMessage == null) {
            EditMessageText errorMessage = new EditMessageText();
            errorMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
            errorMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            errorMessage.setText("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ.");
            execute(errorMessage);
            return;
        }

        try {
            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
            // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
            String channelUsername = channelService.getChannelUsername(botConfig.getId(), channelId);

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            String footer = botService.getBotSetting(botConfig.getId(), "publication_footer", "");

            if (originalMessage.hasText()) {
                SendMessage publishMessage = new SendMessage();
                publishMessage.setChatId(channelUsername);

                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                String text = originalMessage.getText();
                if (!footer.isEmpty()) {
                    text += "\n\n" + footer;
                }

                publishMessage.setText(text);
                publishMessage.setDisableNotification(silent);

                if (scheduledDate != null) {
                    // –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ API
                    // –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º
                    botService.schedulePublication(botConfig.getId(), channelId, text, scheduledDate);

                    EditMessageText confirmMessage = new EditMessageText();
                    confirmMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
                    confirmMessage.setMessageId(callbackQuery.getMessage().getMessageId());
                    confirmMessage.setText("üïí –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ " + scheduledDate);
                    execute(confirmMessage);
                    return;
                }

                execute(publishMessage);
            } else if (originalMessage.hasPhoto()) {
                // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
                // ...
            } else if (originalMessage.hasVideo()) {
                // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
                // ...
            } else if (originalMessage.hasDocument()) {
                // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                // ...
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—Ö–µ
            EditMessageText confirmMessage = new EditMessageText();
            confirmMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
            confirmMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            confirmMessage.setText("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!");
            execute(confirmMessage);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            SendMessage notifyUser = new SendMessage();
            notifyUser.setChatId(userId.toString());
            notifyUser.setText("üéâ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!");
            execute(notifyUser);

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
            userMsgs.remove(messageId);
        } catch (Exception e) {
            e.printStackTrace();

            EditMessageText errorMessage = new EditMessageText();
            errorMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
            errorMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            errorMessage.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: " + e.getMessage());
            execute(errorMessage);
        }
    }

    private void handleEdit(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        Map<Integer, Message> userMsgs = userMessages.getOrDefault(userId, new HashMap<>());
        Message originalMessage = userMsgs.get(messageId);

        if (originalMessage == null) {
            EditMessageText errorMessage = new EditMessageText();
            errorMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
            errorMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            errorMessage.setText("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ.");
            execute(errorMessage);
            return;
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        botService.setAdminState(botConfig.getId(), callbackQuery.getFrom().getId(),
                "EDITING:" + userId + ":" + messageId);

        EditMessageText promptMessage = new EditMessageText();
        promptMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
        promptMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        promptMessage.setText("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n" +
                "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" + getMessageContent(originalMessage));
        execute(promptMessage);
    }

    private void handleReject(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        Map<Integer, Message> userMsgs = userMessages.getOrDefault(userId, new HashMap<>());

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        EditMessageText confirmMessage = new EditMessageText();
        confirmMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
        confirmMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        confirmMessage.setText("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton undoButton = new InlineKeyboardButton();
        undoButton.setText("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å");
        undoButton.setCallbackData("undo_reject:" + userId + ":" + messageId);
        row.add(undoButton);

        keyboard.add(row);
        markup.setKeyboard(keyboard);
        confirmMessage.setReplyMarkup(markup);

        execute(confirmMessage);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        SendMessage notifyUser = new SendMessage();
        notifyUser.setChatId(userId.toString());
        notifyUser.setText("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.");
        execute(notifyUser);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        userMsgs.remove(messageId);
    }

    private void handleBlock(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        blockedUserService.blockUser(botConfig.getId(), userId);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        EditMessageText confirmMessage = new EditMessageText();
        confirmMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
        confirmMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        confirmMessage.setText("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton unblockButton = new InlineKeyboardButton();
        unblockButton.setText("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å");
        unblockButton.setCallbackData("unblock:" + userId);
        row.add(unblockButton);

        keyboard.add(row);
        markup.setKeyboard(keyboard);
        confirmMessage.setReplyMarkup(markup);

        execute(confirmMessage);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        SendMessage notifyUser = new SendMessage();
        notifyUser.setChatId(userId.toString());
        notifyUser.setText("‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.");
        execute(notifyUser);
    }

    private void handleSchedule(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium
        if (!botService.hasPremiumFeature(botConfig, "scheduled_posts")) {
            EditMessageText errorMessage = new EditMessageText();
            errorMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
            errorMessage.setMessageId(callbackQuery.getMessage().getMessageId());
            errorMessage.setText("‚≠ê –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Premium –ø–æ–¥–ø–∏—Å–∫–µ");
            execute(errorMessage);
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        showScheduleCalendar(callbackQuery, userId, messageId);
    }

    private void showScheduleCalendar(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        // –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞

        EditMessageText calendarMessage = new EditMessageText();
        calendarMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
        calendarMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        calendarMessage.setText("üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:");

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        Calendar cal = Calendar.getInstance();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        for (int i = 1; i <= 3; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();

            cal.add(Calendar.HOUR, i);
            Date date = cal.getTime();
            String formattedDate = new java.text.SimpleDateFormat("HH:mm").format(date);

            InlineKeyboardButton timeButton = new InlineKeyboardButton();
            timeButton.setText("–ß–µ—Ä–µ–∑ " + i + " —á. (" + formattedDate + ")");
            timeButton.setCallbackData("schedule_time:" + userId + ":" + messageId + ":" + date.getTime());
            row.add(timeButton);

            keyboard.add(row);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ù–∞–∑–∞–¥");
        backButton.setCallbackData("schedule_cancel:" + userId + ":" + messageId);
        backRow.add(backButton);
        keyboard.add(backRow);

        markup.setKeyboard(keyboard);
        calendarMessage.setReplyMarkup(markup);

        execute(calendarMessage);
    }

    private void handleSilent(CallbackQuery callbackQuery, Long userId, Integer messageId) throws TelegramApiException {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –∑–≤—É–∫–∞
        List<Map<String, String>> channels = channelService.getChannelsInfo(botConfig.getId());

        EditMessageText selectionMessage = new EditMessageText();
        selectionMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
        selectionMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        selectionMessage.setText("üîï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –∑–≤—É–∫–∞:");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Map<String, String> channel : channels) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton channelButton = new InlineKeyboardButton();
            channelButton.setText(channel.get("title"));
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –∑–≤—É–∫–∞
            channelButton.setCallbackData("publish_silent:" + userId + ":" + messageId + ":" + channel.get("id"));
            row.add(channelButton);
            keyboard.add(row);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ù–∞–∑–∞–¥");
        backButton.setCallbackData("silent_cancel:" + userId + ":" + messageId);
        backRow.add(backButton);
        keyboard.add(backRow);

        markup.setKeyboard(keyboard);
        selectionMessage.setReplyMarkup(markup);

        execute(selectionMessage);
    }

    private void handleUnblock(CallbackQuery callbackQuery, Long userId) throws TelegramApiException {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        blockedUserService.unblockUser(botConfig.getId(), userId);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        EditMessageText confirmMessage = new EditMessageText();
        confirmMessage.setChatId(callbackQuery.getMessage().getChatId().toString());
        confirmMessage.setMessageId(callbackQuery.getMessage().getMessageId());
        confirmMessage.setText("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.");
        execute(confirmMessage);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        SendMessage notifyUser = new SendMessage();
        notifyUser.setChatId(userId.toString());
        notifyUser.setText("‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.");
        execute(notifyUser);
    }

    private void handleAdminCommand(Message message) throws TelegramApiException {
        String command = message.getText();
        Long chatId = message.getChatId();

        if ("/help".equals(command)) {
            sendAdminHelp(chatId);
        } else if ("/stats".equals(command)) {
            sendBotStats(chatId);
        } else if ("/settings".equals(command)) {
            sendBotSettings(chatId);
        } else if (command.startsWith("/channel_add")) {
            handleAddChannel(chatId, command);
        } else if (command.startsWith("/channel_remove")) {
            handleRemoveChannel(chatId, command);
        } else if ("/channels".equals(command)) {
            sendChannelsList(chatId);
        } else if ("/blocklist".equals(command)) {
            sendBlockedUsersList(chatId);
        } else {
            SendMessage unknownCommand = new SendMessage();
            unknownCommand.setChatId(chatId.toString());
            unknownCommand.setText("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
            execute(unknownCommand);
        }
    }

    private void sendAdminHelp(Long chatId) throws TelegramApiException {
        SendMessage helpMessage = new SendMessage();
        helpMessage.setChatId(chatId.toString());
        helpMessage.setText("üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n" +
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n" +
                "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n" +
                "/channels - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n" +
                "/channel_add @username - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n" +
                "/channel_remove @username - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n" +
                "/blocklist - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n" +
                "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.");
        helpMessage.enableMarkdown(true);
        execute(helpMessage);
    }

    private void sendBotStats(Long chatId) throws TelegramApiException {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
        Map<String, Integer> stats = botService.getBotStats(botConfig.getId());

        SendMessage statsMessage = new SendMessage();
        statsMessage.setChatId(chatId.toString());
        statsMessage.setText("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n" +
                "üì® –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: " + stats.getOrDefault("messages_received", 0) + "\n" +
                "üì¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: " + stats.getOrDefault("messages_published", 0) + "\n" +
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: " + stats.getOrDefault("messages_rejected", 0) + "\n" +
                "‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + stats.getOrDefault("users_blocked", 0) + "\n" +
                "üìÜ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: " + botConfig.getCreatedAt().toString());
        statsMessage.enableMarkdown(true);
        execute(statsMessage);
    }

    private void sendBotSettings(Long chatId) throws TelegramApiException {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        Map<String, String> settings = botService.getBotSettingsMap(botConfig.getId());
        boolean isPremium = botService.hasPremiumSubscription(botConfig.getOwnerId());

        StringBuilder settingsText = new StringBuilder();
        settingsText.append("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n");
        settingsText.append("ü§ñ –ò–º—è –±–æ—Ç–∞: ").append(botConfig.getName()).append("\n");
        settingsText.append("üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ").append(botConfig.getWelcomeMessage()).append("\n");
        settingsText.append("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏: ").append(botConfig.getConfirmationMessage()).append("\n");

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Premium —Ñ—É–Ω–∫—Ü–∏—è—Ö
        settingsText.append("\nüíé *Premium —Ñ—É–Ω–∫—Ü–∏–∏*\n");
        settingsText.append(isPremium ? "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" : "‚ùå –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞").append("\n");

        if (isPremium) {
            settingsText.append("‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ‚úÖ\n");
            settingsText.append("üñºÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞: ‚úÖ\n");
            settingsText.append("üè∑Ô∏è –ë–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: ‚úÖ\n");
        } else {
            settingsText.append("‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ‚ùå\n");
            settingsText.append("üñºÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞: ‚ùå\n");
            settingsText.append("üè∑Ô∏è –ë–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: ‚ùå\n");
        }

        SendMessage settingsMessage = new SendMessage();
        settingsMessage.setChatId(chatId.toString());
        settingsMessage.setText(settingsText.toString());
        settingsMessage.enableMarkdown(true);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton welcomeButton = new InlineKeyboardButton();
        welcomeButton.setText("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ");
        welcomeButton.setCallbackData("edit_welcome");
        row1.add(welcomeButton);
        keyboard.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏");
        confirmButton.setCallbackData("edit_confirm");
        row2.add(confirmButton);
        keyboard.add(row2);

        if (!isPremium) {
            List<InlineKeyboardButton> row3 = new ArrayList<>();
            InlineKeyboardButton premiumButton = new InlineKeyboardButton();
            premiumButton.setText("üíé –ü–æ–ª—É—á–∏—Ç—å Premium");
            premiumButton.setCallbackData("upgrade_premium");
            row3.add(premiumButton);
            keyboard.add(row3);
        }

        markup.setKeyboard(keyboard);
        settingsMessage.setReplyMarkup(markup);

        execute(settingsMessage);
    }

    private void handleAddChannel(Long chatId, String command) throws TelegramApiException {
        String[] parts = command.split(" ", 2);
        if (parts.length < 2) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /channel_add @username");
            execute(errorMessage);
            return;
        }

        String channelUsername = parts[1].trim();
        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (channelUsername.startsWith("@")) {
            channelUsername = channelUsername.substring(1);
        }

        try {
            boolean added = channelService.addChannel(botConfig.getId(), channelUsername);

            SendMessage resultMessage = new SendMessage();
            resultMessage.setChatId(chatId.toString());

            if (added) {
                resultMessage.setText("‚úÖ –ö–∞–Ω–∞–ª @" + channelUsername + " —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n" +
                        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä " +
                        "—Å –ø—Ä–∞–≤–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.");
            } else {
                resultMessage.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω " +
                        "–∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            }

            execute(resultMessage);
        } catch (Exception e) {
            e.printStackTrace();
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: " + e.getMessage());
            execute(errorMessage);
        }
    }

    private void handleRemoveChannel(Long chatId, String command) throws TelegramApiException {
        String[] parts = command.split(" ", 2);
        if (parts.length < 2) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /channel_remove @username");
            execute(errorMessage);
            return;
        }

        String channelUsername = parts[1].trim();
        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (channelUsername.startsWith("@")) {
            channelUsername = channelUsername.substring(1);
        }

        try {
            boolean removed = channelService.removeChannel(botConfig.getId(), channelUsername);

            SendMessage resultMessage = new SendMessage();
            resultMessage.setChatId(chatId.toString());

            if (removed) {
                resultMessage.setText("‚úÖ –ö–∞–Ω–∞–ª @" + channelUsername + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!");
            } else {
                resultMessage.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω " +
                        "–∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            }

            execute(resultMessage);
        } catch (Exception e) {
            e.printStackTrace();
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: " + e.getMessage());
            execute(errorMessage);
        }
    }

    private void sendChannelsList(Long chatId) throws TelegramApiException {
        List<Map<String, String>> channels = channelService.getChannelsInfo(botConfig.getId());

        if (channels.isEmpty()) {
            SendMessage noChannelsMessage = new SendMessage();
            noChannelsMessage.setChatId(chatId.toString());
            noChannelsMessage.setText("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /channel_add @username —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.\n" +
                    "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!");
            execute(noChannelsMessage);
            return;
        }

        StringBuilder channelsText = new StringBuilder();
        channelsText.append("üì¢ *–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤*\n\n");

        for (int i = 0; i < channels.size(); i++) {
            Map<String, String> channel = channels.get(i);
            channelsText.append(i + 1).append(". @").append(channel.get("username"))
                    .append(" (").append(channel.get("title")).append(")\n");
        }

        channelsText.append("\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /channel_add @username\n");
        channelsText.append("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /channel_remove @username");

        SendMessage channelsMessage = new SendMessage();
        channelsMessage.setChatId(chatId.toString());
        channelsMessage.setText(channelsText.toString());
        channelsMessage.enableMarkdown(true);
        execute(channelsMessage);
    }

    private void sendBlockedUsersList(Long chatId) throws TelegramApiException {
        List<BlockedUser> blockedUsers = blockedUserService.getBlockedUsers(botConfig.getId());

        if (blockedUsers.isEmpty()) {
            SendMessage noBlockedMessage = new SendMessage();
            noBlockedMessage.setChatId(chatId.toString());
            noBlockedMessage.setText("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.");
            execute(noBlockedMessage);
            return;
        }

        StringBuilder blockedText = new StringBuilder();
        blockedText.append("‚õî *–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n");

        for (int i = 0; i < blockedUsers.size(); i++) {
            BlockedUser user = blockedUsers.get(i);
            blockedText.append(i + 1).append(". ID: ").append(user.getTelegramId())
                    .append(" (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ").append(user.getBlockedAt().toString()).append(")\n");
        }

        blockedText.append("\n–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:");

        SendMessage blockedMessage = new SendMessage();
        blockedMessage.setChatId(chatId.toString());
        blockedMessage.setText(blockedText.toString());
        blockedMessage.enableMarkdown(true);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (!blockedUsers.isEmpty()) {
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            int limit = Math.min(blockedUsers.size(), 5);
            for (int i = 0; i < limit; i++) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                InlineKeyboardButton unblockButton = new InlineKeyboardButton();
                unblockButton.setText("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ID: " + blockedUsers.get(i).getTelegramId());
                unblockButton.setCallbackData("unblock:" + blockedUsers.get(i).getTelegramId());
                row.add(unblockButton);
                keyboard.add(row);
            }

            markup.setKeyboard(keyboard);
            blockedMessage.setReplyMarkup(markup);
        }

        execute(blockedMessage);
    }

    private void handleAdminReply(Message message) throws TelegramApiException {
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω
        Integer repliedToMessageId = message.getReplyToMessage().getMessageId();

        // –ò—â–µ–º —Å–≤—è–∑—å –≤ messageLinks
        MessageLink link = null;
        for (MessageLink ml : messageLinks.values()) {
            if (ml.getAdminForwardedMessageId().equals(repliedToMessageId)) {
                link = ml;
                break;
            }
        }

        if (link == null) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(message.getChatId().toString());
            errorMessage.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            execute(errorMessage);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        SendMessage replyToUser = new SendMessage();
        replyToUser.setChatId(link.getUserId().toString());
        replyToUser.setText("üë®‚Äçüíº *–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*:\n\n" + message.getText());
        replyToUser.enableMarkdown(true);

        try {
            execute(replyToUser);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            SendMessage confirmationToAdmin = new SendMessage();
            confirmationToAdmin.setChatId(message.getChatId().toString());
            confirmationToAdmin.setText("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
            execute(confirmationToAdmin);
        } catch (Exception e) {
            e.printStackTrace();
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(message.getChatId().toString());
            errorMessage.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + e.getMessage());
            execute(errorMessage);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private String getMessageContent(Message message) {
        if (message.hasText()) {
            return message.getText();
        } else if (message.hasPhoto()) {
            return "[–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]" + (message.getCaption() != null ? ": " + message.getCaption() : "");
        } else if (message.hasVideo()) {
            return "[–í–∏–¥–µ–æ]" + (message.getCaption() != null ? ": " + message.getCaption() : "");
        } else if (message.hasDocument()) {
            return "[–î–æ–∫—É–º–µ–Ω—Ç: " + message.getDocument().getFileName() + "]" +
                    (message.getCaption() != null ? ": " + message.getCaption() : "");
        } else if (message.hasSticker()) {
            return "[–°—Ç–∏–∫–µ—Ä]";
        } else if (message.hasVoice()) {
            return "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]";
        } else if (message.hasVideoNote()) {
            return "[–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ]";
        }
        return "[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]";
    }

    // –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    private static class MessageLink {
        private final Long userId;
        private final Integer userMessageId;
        private final Integer adminForwardedMessageId;
        private final Integer adminControlMessageId;

        public MessageLink(Long userId, Integer userMessageId,
                           Integer adminForwardedMessageId, Integer adminControlMessageId) {
            this.userId = userId;
            this.userMessageId = userMessageId;
            this.adminForwardedMessageId = adminForwardedMessageId;
            this.adminControlMessageId = adminControlMessageId;
        }

        public Long getUserId() {
            return userId;
        }

        public Integer getUserMessageId() {
            return userMessageId;
        }

        public Integer getAdminForwardedMessageId() {
            return adminForwardedMessageId;
        }

        public Integer getAdminControlMessageId() {
            return adminControlMessageId;
        }
    }
}