package com.telegramproposalbot.telegram.bot;

import com.telegramproposalbot.entity.User;
import com.telegramproposalbot.service.BotService;
import com.telegramproposalbot.service.UserService;
import com.telegramproposalbot.telegram.handler.CallbackQueryHandler;
import com.telegramproposalbot.telegram.handler.CommandHandler;
import com.telegramproposalbot.telegram.miniapp.MiniAppHandler;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.DefaultAbsSender;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class MainBot extends TelegramLongPollingBot {

    private final UserService userService;
    private final BotService botService;
    private final CommandHandler commandHandler;
    private final CallbackQueryHandler callbackQueryHandler;
    private final MiniAppHandler miniAppHandler;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–µ—Å–µ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    private final Map<Long, UserState> userStates = new HashMap<>();

    @Value("${telegram.bot.main.username}")
    private String botUsername;

    @Value("${telegram.bot.main.token}")
    private String botToken;

    public MainBot(UserService userService, BotService botService,
                   CommandHandler commandHandler, CallbackQueryHandler callbackQueryHandler,
                   MiniAppHandler miniAppHandler) {
        super(new DefaultBotOptions(), "placeholder-token"); // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.userService = userService;
        this.botService = botService;
        this.commandHandler = commandHandler;
        this.callbackQueryHandler = callbackQueryHandler;
        this.miniAppHandler = miniAppHandler;
    }

    @PostConstruct
    public void init() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏–Ω–∞
        try {
            Field tokenField = DefaultAbsSender.class.getDeclaredField("botToken");
            tokenField.setAccessible(true);
            tokenField.set(this, botToken);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞", e);
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    // –ú–µ—Ç–æ–¥ getBotToken() —É—Å—Ç–∞—Ä–µ–ª, –Ω–æ –Ω–∞–º –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    @Deprecated
    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.hasMessage()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebApp –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if (update.getMessage().getWebAppData() != null) {
                    miniAppHandler.handleWebAppData(update.getMessage().getWebAppData());
                } else {
                    handleMessage(update.getMessage());
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
            else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update.getCallbackQuery());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleMessage(Message message) throws TelegramApiException {
        Long chatId = message.getChatId();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        User user = userService.getOrCreateUser(message.getFrom());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserState state = userStates.getOrDefault(chatId, UserState.NONE);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (message.hasText() && message.getText().startsWith("/")) {
            BotApiMethod<?> responseMethod = commandHandler.handleCommand(message);
            execute(responseMethod);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        switch (state) {
            case AWAITING_BOT_TOKEN:
                handleBotTokenInput(chatId, message.getText());
                break;
            case AWAITING_BOT_NAME:
                handleBotNameInput(chatId, message.getText());
                break;
            case AWAITING_WELCOME_MESSAGE:
                handleWelcomeMessageInput(chatId, message.getText());
                break;
            // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...
            default:
                sendMainMenu(chatId);
                break;
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) throws TelegramApiException {
        BotApiMethod<?> responseMethod = callbackQueryHandler.handleCallbackQuery(callbackQuery);
        if (responseMethod != null) {
            execute(responseMethod);
        }
    }

    private void handleBotTokenInput(Long chatId, String tokenText) throws TelegramApiException {
        if (tokenText == null || !tokenText.trim().matches("[0-9]{9}:[a-zA-Z0-9_-]{35}")) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ Telegram.\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather.");
            execute(errorMessage);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        userStates.put(chatId, UserState.AWAITING_BOT_NAME);
        userService.saveTemporaryBotToken(chatId, tokenText);

        SendMessage nameRequest = new SendMessage();
        nameRequest.setChatId(chatId.toString());
        nameRequest.setText("‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞-–ø—Ä–µ–¥–ª–æ–∂–∫–∏:");
        execute(nameRequest);
    }

    private void handleBotNameInput(Long chatId, String botName) throws TelegramApiException {
        if (botName == null || botName.length() < 3 || botName.length() > 64) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤.\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.");
            execute(errorMessage);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        userStates.put(chatId, UserState.AWAITING_WELCOME_MESSAGE);
        userService.saveTemporaryBotName(chatId, botName);

        SendMessage welcomeRequest = new SendMessage();
        welcomeRequest.setChatId(chatId.toString());
        welcomeRequest.setText("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, " +
                "–∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É:");
        execute(welcomeRequest);
    }

    private void handleWelcomeMessageInput(Long chatId, String welcomeMessage) throws TelegramApiException {
        if (welcomeMessage == null || welcomeMessage.length() > 4096) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤).\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
            execute(errorMessage);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        User user = userService.getUserByTelegramId(chatId);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
            if (!userService.canCreateBot(user)) {
                SendMessage errorMessage = new SendMessage();
                errorMessage.setChatId(chatId.toString());
                errorMessage.setText("‚ùå –ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞.\n" +
                        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤.");

                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                List<InlineKeyboardButton> row = new ArrayList<>();

                InlineKeyboardButton premiumButton = new InlineKeyboardButton();
                premiumButton.setText("üíé –ö—É–ø–∏—Ç—å Premium");
                premiumButton.setCallbackData("buy_premium");
                row.add(premiumButton);

                keyboard.add(row);
                markup.setKeyboard(keyboard);
                errorMessage.setReplyMarkup(markup);

                execute(errorMessage);
                userStates.put(chatId, UserState.NONE);
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            String token = userService.getTemporaryBotToken(chatId);
            String name = userService.getTemporaryBotName(chatId);

            // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            botService.createBot(user, token, name, welcomeMessage);

            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            userStates.put(chatId, UserState.NONE);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            SendMessage successMessage = new SendMessage();
            successMessage.setChatId(chatId.toString());
            successMessage.setText("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–æ—Ç-–ø—Ä–µ–¥–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n" +
                    "–ò–º—è –±–æ—Ç–∞: " + name + "\n" +
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton manageButton = new InlineKeyboardButton();
            manageButton.setText("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º");
            manageButton.setCallbackData("manage_bot:" + botService.getLatestBotId(user));
            row1.add(manageButton);
            keyboard.add(row1);

            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton helpButton = new InlineKeyboardButton();
            helpButton.setText("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è");
            helpButton.setCallbackData("bot_help");
            row2.add(helpButton);
            keyboard.add(row2);

            markup.setKeyboard(keyboard);
            successMessage.setReplyMarkup(markup);

            execute(successMessage);
        } catch (Exception e) {
            e.printStackTrace();
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ " +
                    "—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –±–æ—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.");
            execute(errorMessage);
            userStates.put(chatId, UserState.NONE);
        }
    }

    private void sendMainMenu(Long chatId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤-–ø—Ä–µ–¥–ª–æ–∂–µ–∫!\n\n" +
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∞—à –∫–∞–Ω–∞–ª. " +
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton createButton = new InlineKeyboardButton();
        createButton.setText("ü§ñ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞");
        createButton.setCallbackData("create_bot");
        row1.add(createButton);
        keyboard.add(row1);

        User user = userService.getUserByTelegramId(chatId);
        if (botService.userHasBots(user)) {
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton myBotsButton = new InlineKeyboardButton();
            myBotsButton.setText("üìã –ú–æ–∏ –±–æ—Ç—ã");
            myBotsButton.setCallbackData("my_bots");
            row2.add(myBotsButton);
            keyboard.add(row2);
        }

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton helpButton = new InlineKeyboardButton();
        helpButton.setText("‚ùì –ü–æ–º–æ—â—å");
        helpButton.setCallbackData("help");
        row3.add(helpButton);

        InlineKeyboardButton premiumButton = new InlineKeyboardButton();
        premiumButton.setText("üíé Premium");
        premiumButton.setCallbackData("premium_info");
        row3.add(premiumButton);
        keyboard.add(row3);

        // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Telegram Mini Apps, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        InlineKeyboardButton webAppButton = new InlineKeyboardButton();
        webAppButton.setText("üåê –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        webAppButton.setWebApp(new org.telegram.telegrambots.meta.api.objects.webapp.WebAppInfo(
                "https://yourdomain.com/webapp"
        ));
        row4.add(webAppButton);
        keyboard.add(row4);

        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);

        execute(message);
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
    public enum UserState {
        NONE,
        AWAITING_BOT_TOKEN,
        AWAITING_BOT_NAME,
        AWAITING_WELCOME_MESSAGE,
        AWAITING_CONFIRMATION_MESSAGE,
        // –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...
    }
}