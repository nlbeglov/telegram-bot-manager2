package com.telegramproposalbot.telegram.bot;

import com.telegramproposalbot.entity.User;
import com.telegramproposalbot.service.BotService;
import com.telegramproposalbot.service.LocalizationService;
import com.telegramproposalbot.service.UserService;
import com.telegramproposalbot.telegram.handler.CallbackQueryHandler;
import com.telegramproposalbot.telegram.handler.CommandHandler;
import com.telegramproposalbot.telegram.miniapp.MiniAppHandler;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.DefaultAbsSender;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class MainBot extends TelegramLongPollingBot {

    private final UserService userService;
    private final BotService botService;
    private final CommandHandler commandHandler;
    private final CallbackQueryHandler callbackQueryHandler;
    private final MiniAppHandler miniAppHandler;
    private final LocalizationService localizationService;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–µ—Å–µ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    private final Map<Long, UserState> userStates = new HashMap<>();

    @Value("${telegram.bot.main.username}")
    private String botUsername;

    @Value("${telegram.bot.main.token}")
    private String botToken;

    public MainBot(UserService userService, BotService botService,
                   CommandHandler commandHandler, CallbackQueryHandler callbackQueryHandler,
                   MiniAppHandler miniAppHandler, LocalizationService localizationService) {
        super(new DefaultBotOptions(), "placeholder-token"); // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.userService = userService;
        this.botService = botService;
        this.commandHandler = commandHandler;
        this.callbackQueryHandler = callbackQueryHandler;
        this.miniAppHandler = miniAppHandler;
        this.localizationService = localizationService;
    }

    @PostConstruct
    public void init() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏–Ω–∞
        try {
            Field tokenField = DefaultAbsSender.class.getDeclaredField("botToken");
            tokenField.setAccessible(true);
            tokenField.set(this, botToken);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞", e);
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    // –ú–µ—Ç–æ–¥ getBotToken() —É—Å—Ç–∞—Ä–µ–ª, –Ω–æ –Ω–∞–º –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    @Deprecated
    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.hasMessage()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
                if (update.getMessage().hasText() && update.getMessage().getText().equals("/language")) {
                    sendLanguageSelection(update.getMessage().getChatId());
                    return;
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
                if (update.getMessage().hasText() &&
                        (update.getMessage().getText().equals("/ru") ||
                                update.getMessage().getText().equals("/en"))) {

                    String langCode = update.getMessage().getText().substring(1);
                    handleLanguageChange(update.getMessage().getChatId(), langCode);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebApp –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if (update.getMessage().getWebAppData() != null) {
                    miniAppHandler.handleWebAppData(update.getMessage().getWebAppData());
                } else {
                    handleMessage(update.getMessage());
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
            else if (update.hasCallbackQuery()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±–æ—Ä –ª–∏ —ç—Ç–æ —è–∑—ã–∫–∞
                if (update.getCallbackQuery().getData().startsWith("language:")) {
                    String langCode = update.getCallbackQuery().getData().split(":")[1];
                    handleLanguageChange(update.getCallbackQuery().getMessage().getChatId(), langCode);
                    return;
                }

                handleCallbackQuery(update.getCallbackQuery());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
     */
    private void sendLanguageSelection(Long chatId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–æ–≤
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton russianButton = new InlineKeyboardButton();
        russianButton.setText("üá∑üá∫ –†—É—Å—Å–∫–∏–π");
        russianButton.setCallbackData("language:ru");
        row.add(russianButton);

        InlineKeyboardButton englishButton = new InlineKeyboardButton();
        englishButton.setText("üá¨üáß English");
        englishButton.setCallbackData("language:en");
        row.add(englishButton);

        keyboard.add(row);
        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);

        execute(message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
     */
    private void handleLanguageChange(Long chatId, String langCode) throws TelegramApiException {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localizationService.setUserLocale(chatId, langCode);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());

        if ("ru".equals(langCode)) {
            message.setText("‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π");
        } else {
            message.setText("‚úÖ Language has been changed to English");
        }

        execute(message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        sendMainMenu(chatId);
    }

    private void handleMessage(Message message) throws TelegramApiException {
        Long chatId = message.getChatId();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        User user = userService.getOrCreateUser(message.getFrom());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserState state = userStates.getOrDefault(chatId, UserState.NONE);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ - –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        if (message.hasText() && message.getText().startsWith("/")) {
            BotApiMethod<?> responseMethod = commandHandler.handleCommand(message);
            execute(responseMethod);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        switch (state) {
            case AWAITING_BOT_TOKEN:
                handleBotTokenInput(chatId, message.getText());
                break;
            case AWAITING_BOT_NAME:
                handleBotNameInput(chatId, message.getText());
                break;
            case AWAITING_WELCOME_MESSAGE:
                handleWelcomeMessageInput(chatId, message.getText());
                break;
            // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...
            default:
                sendMainMenu(chatId);
                break;
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) throws TelegramApiException {
        String callbackData = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if ("back_to_main".equals(callbackData)) {
            sendMainMenu(chatId);
            return;
        } else if ("create_bot".equals(callbackData)) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            userStates.put(chatId, UserState.AWAITING_BOT_TOKEN);
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        BotApiMethod<?> responseMethod = callbackQueryHandler.handleCallbackQuery(callbackQuery);
        if (responseMethod != null) {
            execute(responseMethod);
        }
    }

    private void handleBotTokenInput(Long chatId, String tokenText) throws TelegramApiException {
        if (tokenText == null || !tokenText.trim().matches("[0-9]{9,10}:[a-zA-Z0-9_-]{35}")) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText(localizationService.getMessage("bot.create.token_invalid", chatId));

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText(localizationService.getMessage("common.back", chatId));
            backButton.setCallbackData("back_to_main");
            row.add(backButton);
            keyboard.add(row);
            markup.setKeyboard(keyboard);
            errorMessage.setReplyMarkup(markup);

            execute(errorMessage);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        userStates.put(chatId, UserState.AWAITING_BOT_NAME);
        userService.saveTemporaryBotToken(chatId, tokenText);

        SendMessage nameRequest = new SendMessage();
        nameRequest.setChatId(chatId.toString());
        nameRequest.setText(localizationService.getMessage("bot.create.token_accepted", chatId));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText(localizationService.getMessage("common.back", chatId));
        backButton.setCallbackData("back_to_main");
        row.add(backButton);
        keyboard.add(row);
        markup.setKeyboard(keyboard);
        nameRequest.setReplyMarkup(markup);

        execute(nameRequest);
    }

    private void handleBotNameInput(Long chatId, String botName) throws TelegramApiException {
        if (botName == null || botName.length() < 3 || botName.length() > 64) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText(localizationService.getMessage("bot.create.name_invalid", chatId));

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText(localizationService.getMessage("common.back", chatId));
            backButton.setCallbackData("back_to_main");
            row.add(backButton);
            keyboard.add(row);
            markup.setKeyboard(keyboard);
            errorMessage.setReplyMarkup(markup);

            execute(errorMessage);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        userStates.put(chatId, UserState.AWAITING_WELCOME_MESSAGE);
        userService.saveTemporaryBotName(chatId, botName);

        SendMessage welcomeRequest = new SendMessage();
        welcomeRequest.setChatId(chatId.toString());
        welcomeRequest.setText(localizationService.getMessage("bot.create.name_accepted", chatId));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText(localizationService.getMessage("common.back", chatId));
        backButton.setCallbackData("back_to_main");
        row.add(backButton);
        keyboard.add(row);
        markup.setKeyboard(keyboard);
        welcomeRequest.setReplyMarkup(markup);

        execute(welcomeRequest);
    }

    private void handleWelcomeMessageInput(Long chatId, String welcomeMessage) throws TelegramApiException {
        if (welcomeMessage == null || welcomeMessage.length() > 4096) {
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText(localizationService.getMessage("bot.create.welcome_invalid", chatId));

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText(localizationService.getMessage("common.back", chatId));
            backButton.setCallbackData("back_to_main");
            row.add(backButton);
            keyboard.add(row);
            markup.setKeyboard(keyboard);
            errorMessage.setReplyMarkup(markup);

            execute(errorMessage);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        User user = userService.getUserByTelegramId(chatId);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
            if (!userService.canCreateBot(user)) {
                SendMessage errorMessage = new SendMessage();
                errorMessage.setChatId(chatId.toString());
                errorMessage.setText(localizationService.getMessage("bot.create.limit_reached", chatId));

                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                List<InlineKeyboardButton> row = new ArrayList<>();

                InlineKeyboardButton premiumButton = new InlineKeyboardButton();
                premiumButton.setText(localizationService.getMessage("premium.buy", chatId));
                premiumButton.setCallbackData("buy_premium");
                row.add(premiumButton);

                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText(localizationService.getMessage("common.back", chatId));
                backButton.setCallbackData("back_to_main");
                row.add(backButton);

                keyboard.add(row);
                markup.setKeyboard(keyboard);
                errorMessage.setReplyMarkup(markup);

                execute(errorMessage);
                userStates.put(chatId, UserState.NONE);
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            String token = userService.getTemporaryBotToken(chatId);
            String name = userService.getTemporaryBotName(chatId);

            // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            botService.createBot(user, token, name, welcomeMessage);

            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            userStates.put(chatId, UserState.NONE);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            SendMessage successMessage = new SendMessage();
            successMessage.setChatId(chatId.toString());
            successMessage.setText(localizationService.getMessage("bot.create.success", new Object[]{name}, chatId));

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            InlineKeyboardButton manageButton = new InlineKeyboardButton();
            manageButton.setText("‚öôÔ∏è " + localizationService.getMessage("bot.manage.button", chatId));
            manageButton.setCallbackData("manage_bot:" + botService.getLatestBotId(user));
            row1.add(manageButton);
            keyboard.add(row1);

            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton helpButton = new InlineKeyboardButton();
            helpButton.setText("‚ùì " + localizationService.getMessage("bot.help.button", chatId));
            helpButton.setCallbackData("bot_help");
            row2.add(helpButton);

            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText(localizationService.getMessage("common.back", chatId));
            backButton.setCallbackData("back_to_main");
            row2.add(backButton);

            keyboard.add(row2);

            markup.setKeyboard(keyboard);
            successMessage.setReplyMarkup(markup);

            execute(successMessage);
        } catch (Exception e) {
            e.printStackTrace();
            SendMessage errorMessage = new SendMessage();
            errorMessage.setChatId(chatId.toString());
            errorMessage.setText(localizationService.getMessage("bot.create.error", chatId));

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText(localizationService.getMessage("common.back", chatId));
            backButton.setCallbackData("back_to_main");
            row.add(backButton);
            keyboard.add(row);
            markup.setKeyboard(keyboard);
            errorMessage.setReplyMarkup(markup);

            execute(errorMessage);
            userStates.put(chatId, UserState.NONE);
        }
    }

    private void sendMainMenu(Long chatId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());

        String welcome = localizationService.getMessage("common.welcome", chatId);
        String createBot = localizationService.getMessage("common.create_bot", chatId);

        message.setText(welcome + "\n\n" + createBot);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton createButton = new InlineKeyboardButton();
        createButton.setText("ü§ñ " + localizationService.getMessage("common.create_bot_button", chatId));
        createButton.setCallbackData("create_bot");
        row1.add(createButton);
        keyboard.add(row1);

        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–æ—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –±–æ—Ç—ã"
        User user = userService.getUserByTelegramId(chatId);
        if (botService.userHasBots(user)) {
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton myBotsButton = new InlineKeyboardButton();
            myBotsButton.setText("üìã " + localizationService.getMessage("common.my_bots", chatId));
            myBotsButton.setCallbackData("my_bots");
            row2.add(myBotsButton);
            keyboard.add(row2);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –∏ Premium
        List<InlineKeyboardButton> row3 = new ArrayList<>();

        InlineKeyboardButton helpButton = new InlineKeyboardButton();
        helpButton.setText("‚ùì " + localizationService.getMessage("common.help", chatId));
        helpButton.setCallbackData("help");
        row3.add(helpButton);

        InlineKeyboardButton premiumButton = new InlineKeyboardButton();
        premiumButton.setText("üíé Premium");
        premiumButton.setCallbackData("premium_info");
        row3.add(premiumButton);
        keyboard.add(row3);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        InlineKeyboardButton langButton = new InlineKeyboardButton();
        langButton.setText("üåê " + localizationService.getMessage("common.language", chatId));
        langButton.setCallbackData("language_menu");
        row4.add(langButton);
        keyboard.add(row4);

        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);

        execute(message);
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
    public enum UserState {
        NONE,
        AWAITING_BOT_TOKEN,
        AWAITING_BOT_NAME,
        AWAITING_WELCOME_MESSAGE,
        AWAITING_CONFIRMATION_MESSAGE,
        // –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...
    }
}